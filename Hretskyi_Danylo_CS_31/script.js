// –†–æ–∑–º—ñ—Ä –ø–æ–ª—è
const ROWS = 9;
const COLS = 9;

const MINES = 10;

// –°—Ç–∞–Ω–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏
const COVERED = 0; // –∑–∞–∫—Ä–∏—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
const UNCOVERED = 1; // –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
const FLAGGED = 2; // –ø—Ä–∞–ø–æ—Ä

//–Ü–≥—Ä–æ–≤–∏–π —Å—Ç–∞–Ω
const GAME_PLAYING = 0; // –≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ
const GAME_WIN     = 1; // –≥—Ä–∞ –≤–∏–≥—Ä–∞–Ω–∞
const GAME_LOSE    = -1; // –≥—Ä–∞ –ø—Ä–æ–≥—Ä–∞–Ω–∞
let timerId = null;   // setInterval handler
let seconds = 0;      // —Å–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —ñ–¥–µ –≥—Ä–∞

// –§–∞–±—Ä–∏–∫–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏
const makeCell = (row, col) => ({
  row,                // —Ä—è–¥–æ–∫
  col,                // –∫–æ–ª–æ–Ω–∫–∞
  mine: false,      // —á–∏ —î –º—ñ–Ω–∞
  adj: 0,           // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ
  state: COVERED    // –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
});

// –î–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –ø–æ–ª—è
function createBoard(rows = ROWS, cols = COLS) {
    const board = [];
    for (let r = 0; r < rows; r++) {
      const row = [];
      for (let c = 0; c < cols; c++) {
        row.push(makeCell(r, c));
      }
      board.push(row);
    }
    return board;
  }

const board = createBoard(10, 10);
console.log(board);
// –ø—Ä–∏–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø—É:
console.log(board[0][0]);      // –ø–µ—Ä—à–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
console.log(board[2][3].adj);  // adj –¥–ª—è (2,3)

//-------------------lab 3----------------------

const inBounds = (r, c, rows, cols) =>
    r >= 0 && r < rows && c >= 0 && c < cols; // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è
  
function generateField(rows = ROWS, cols = COLS, mines = MINES) {
    const field = createBoard(rows, cols);
    const total = rows * cols;
    const toPlace = Math.min(mines, total); //—â–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–æ–∫
  
    let placed = 0;
    while (placed < toPlace) {
      const row = Math.floor(Math.random() * rows);
      const col = Math.floor(Math.random() * cols);
      if (field[row][col].mine) continue;
      field[row][col].mine = true;
      placed++;
    }
    return field;
  }
//test-test-test--------------------------------
testField = generateField(10, 10, 20);
console.log(testField);
//test-test-test--------------------------------

function countNeighbourMines(field, row, col) { //–ù–ï –ó–ê–ü–ò–°–£–Ñ adj
    const rows = field.length, cols = field[0].length;
    let count = 0;
    for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {
      for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {
        if (!deltaRow && !deltaCol) continue; // —è–∫—â–æ deltaRow —ñ deltaCol –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å 0, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        const rr = row + deltaRow, cc = col + deltaCol;
        if (inBounds(rr, cc, rows, cols) && field[rr][cc].mine) count++; // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è —ñ —á–∏ —î –º—ñ–Ω–∞
      }
    }
    return count;
  }

//test-test-test--------------------------------
console.log(countNeighbourMines(testField, 0, 0));
//test-test-test--------------------------------

function computeAllAdj(field) { //–ó–ê–ü–ò–°–£–Ñ adj
    for (let row = 0; row < field.length; row++) {
      for (let col = 0; col < field[0].length; col++) {
        field[row][col].adj = countNeighbourMines(field, row, col);
      }
    }
  }

//test-test-test--------------------------------
computeAllAdj(testField);
console.log(testField);

const testField2 = generateField(10, 10, 20);
console.log('field with mines:', testField2.map(r => r.map(c => c.mine ? 'üí£' : '.')));

computeAllAdj(testField2);
console.log('adj filled:');
console.table(testField2.map(row => row.map(c => c.adj)));

console.log('cell(0,0):', testField2[0][0]);
//test-test-test--------------------------------

//test-test-test--------------------------------
const game = {
    rows: ROWS,
    cols: COLS,
    mines: MINES,
    status: GAME_PLAYING,
    board: generateField(ROWS, COLS, MINES),
};  

computeAllAdj(game.board);

//test-test-test--------------------------------

function isWin(board) {
  for (let r = 0; r < board.length; r++) {
    for (let c = 0; c < board[0].length; c++) {
      const cell = board[r][c];
      if (!cell.mine && cell.state !== UNCOVERED) return false;
    }
  }
  return true;
}

function openCell(row, col) {
    if (game.status !== GAME_PLAYING) return;      // 1) —è–∫—â–æ –≥—Ä–∞ –≤–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

    const { board } = game;                         // 2) –¥—ñ—Å—Ç–∞—î–º–æ –ø–æ–ª–µ
    const cell = board[row][col];                   // 3) –±–µ—Ä–µ–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  
    // 4) —è–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∞–±–æ —Ç—É—Ç –ø—Ä–∞–ø–æ—Ä ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if (cell.state === UNCOVERED || cell.state === FLAGGED) return;

    // –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —Ç–æ—á–Ω–æ –±—É–¥–µ–º–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏
    if (timerId === null) startTimer();

    // 5) —è–∫—â–æ —Ç—É—Ç –º—ñ–Ω–∞ ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —ó—ó, —Å—Ç–∞–≤–∏–º–æ –ø—Ä–æ–≥—Ä–∞—à —ñ –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
    if (cell.mine) {
      cell.state = UNCOVERED;
      game.status = GAME_LOSE;
      stopTimer();
      console.log('Boom! Loser.');
      return;
    }
  
    // 6) "Flood fill (DFS —á–µ—Ä–µ–∑ —Å—Ç–µ–∫): –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–±–ª–∞—Å—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ (adj===0),
    //    —ñ —ó—Ö–Ω—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤, –ø–æ–∫–∏ —Å—Ç–µ–∫ –Ω–µ —Å–ø–æ—Ä–æ–∂–Ω—ñ—î
    const stack = [[row, col]];
    while (stack.length) {
      const [r, c] = stack.pop();
      const currentCell = board[r][c];
  
      // –º–æ–≥–ª–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–∞–Ω—ñ—à–µ –∞–±–æ —Å—Ç–æ—ó—Ç—å –ø—Ä–∞–ø–æ—Ä–µ—Ü—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
      if (currentCell.state === UNCOVERED || currentCell.state === FLAGGED) continue;
  
      currentCell.state = UNCOVERED;
  
      // —è–∫—â–æ —á–∏—Å–ª–æ –Ω–∞–≤–∫–æ–ª–æ = 0 ‚Äî –¥–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤ —É —Å—Ç–µ–∫ –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
      if (currentCell.adj === 0) {
        for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {
          for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {
            if (!deltaRow && !deltaCol) continue;
            const rr = r + deltaRow, cc = c + deltaCol; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—É—Å—ñ–¥–Ω—å–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ (–í–Ü–î –ü–û–¢–û–ß–ù–û–á r,c)
            if (inBounds(rr, cc, game.rows, game.cols)) { // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è
              const neighbourCell = board[rr][cc]; // –±–µ—Ä–µ–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
              if (neighbourCell.state === COVERED && !neighbourCell.mine) stack.push([rr, cc]); // —è–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞ —ñ –Ω–µ –º—ñ–Ω–∞, —Ç–æ –¥–æ–¥–∞—î–º–æ –≤ —Å—Ç–µ–∫
            }
          }
        }
      }
    }
    if (isWin(game.board)) {
        game.status = GAME_WIN;
        stopTimer();                          // ‚Üê –∑—É–ø–∏–Ω–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–æ–∑—ñ
        console.log('üèÜ Win!');
      }
  }
  
  function draw() {
    console.table(
      game.board.map(row => row.map(c =>
        c.state === FLAGGED ? 'üö©' :
        c.state === COVERED ? '‚ñ†' :
        (c.mine ? 'üí£' : c.adj)
      ))
    );
    console.log('status:', game.status);
  }

//test-test-test--------------------------------
draw();
openCell(0,0)
draw();
//test-test-test--------------------------------

function toggleFlag(row, col) {
    if (game.status !== GAME_PLAYING) return;                    // –≥—Ä–∞ –º–∞—î –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞
    if (!inBounds(row, col, game.rows, game.cols)) return;       // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–∂
  
    const cell = game.board[row][col];
  
    if (cell.state === UNCOVERED) return;                        // –≤—ñ–¥–∫—Ä–∏—Ç—ñ –Ω–µ —Ñ–ª–∞–≥—É—î–º–æ
  
    const wasFlagged = (cell.state === FLAGGED);
    cell.state = wasFlagged ? COVERED : FLAGGED;
  
    // –ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const isFlagged = (cell.state === FLAGGED);
    console.log(`toggleFlag(${row}, ${col}) -> isFlagged: ${isFlagged}`);
  }

  function countFlags(board = game.board) {
    let n = 0;
    for (let r = 0; r < board.length; r++)
      for (let c = 0; c < board[0].length; c++)
        if (board[r][c].state === FLAGGED) n++;
    return n;
  }
  
//test-test-test--------------------------------
  toggleFlag(0,1);
  console.log('flags:', countFlags());
  draw();
  toggleFlag(0,1);
  console.log('flags:', countFlags());
  draw();
//test-test-test--------------------------------

function startTimer() {
  if (timerId !== null) return;                // –≤–∂–µ —Ç—ñ–∫–∞—î ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–¥—Ä—É–≥–µ
  seconds = 0;
  console.log('Timer: 0s');
  timerId = setInterval(() => {
    seconds++;
    console.log(`Timer: ${seconds}s`);
  }, 1000);
}

function stopTimer() {
  if (timerId !== null) {
    clearInterval(timerId);
    timerId = null;
    console.log(`Timer stopped at ${seconds}s`);
  }
}

function resetTimer() {
  stopTimer();
  seconds = 0;
  console.log('Timer reset to 0s');
}

function newGame(rows = ROWS, cols = COLS, mines = MINES) {
    stopTimer();                // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π
    seconds = 0;                // –æ–±–Ω—É–ª–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    game.rows = rows;
    game.cols = cols;
    game.mines = mines;
    game.status = GAME_PLAYING;
    game.board = generateField(rows, cols, mines);
    computeAllAdj(game.board);
    console.log('New game. Timer reset to 0s');
  }
  
//test-test-test--------------------------------
  draw();
  openCell(4,3)
  openCell(3,2)
  draw();
  //test-test-test--------------------------------