// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å—Ç–∞–Ω—ñ–≤ –∫–ª—ñ—Ç–∏–Ω–∫–∏ ---
const CELL_STATE = Object.freeze({
    CLOSED: 'closed',
    OPEN: 'open',
    FLAGGED: 'flagged'
});

// --- –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ ---
function createCell({ hasMine = false, neighborCount = 0, state = CELL_STATE.CLOSED } = {}) {
    return {
        hasMine: Boolean(hasMine),
        neighborCount: Number(neighborCount),
        state
        hasMine: Boolean(hasMine),        // –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º—ñ–Ω–∏
        neighborCount: Number(neighborCount), // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É—Å—ñ–¥–Ω—ñ—Ö –º—ñ–Ω
        state                              // 'closed' | 'open' | 'flagged'
    };
}

// --- –Ü–≥—Ä–æ–≤–∏–π —Å—Ç–∞–Ω (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞) ---
class GameState {
    constructor(rows = 10, cols = 10, mineCount = 10) {
        this.rows = rows;
        this.cols = cols;
        this.mineCount = mineCount;
        this.status = 'playing';
        this.rows = rows;            // —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
        this.cols = cols;            // —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤
        this.mineCount = mineCount;  // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–∞ –ø–æ–ª—ñ
        this.status = 'playing';     // –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏: 'playing' | 'won' | 'lost'

        // –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –ø–æ–¥–∞–Ω–Ω—è –ø–æ–ª—è ‚Äî –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤-–∫–ª—ñ—Ç–∏–Ω–æ–∫
        this.board = createEmptyBoard(rows, cols);
    }
}

// --- –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É—Å—Ç–µ –ø–æ–ª–µ ---
// --- –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É—Å—Ç–µ –ø–æ–ª–µ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ ---
function createEmptyBoard(rows, cols) {
    const board = new Array(rows);
    for (let row = 0; row < rows; row++) {
        board[row] = new Array(cols);
        for (let col = 0; col < cols; col++) {
            board[row][col] = createCell();
        }
    }
    return board;
}

// --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó ---
function isValidPosition(board, row, col) {
    return row >= 0 && row < board.length && col >= 0 && col < board[0].length;
}

// --- –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –º—ñ–Ω–∏ —É –∑–∞–¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó ---
function placeMinesAtPositions(board, positions = []) {
    for (const [row, col] of positions) {
        if (isValidPosition(board, row, col)) board[row][col].hasMine = true;
    }
}

// --- –û–±—á–∏—Å–ª–∏—Ç–∏ neighborCount ---
function computeNeighborCounts(board) {
    const rows = board.length;
    const cols = board[0].length;

    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const cell = board[row][col];

            if (cell.hasMine) {
                cell.neighborCount = null;
                continue;
            }

            let count = 0;
// --- –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –º—ñ–Ω–∏ —É –∑–∞–¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö) ---
// positions ‚Äî –º–∞—Å–∏–≤ –ø–∞—Ä [row, col]
function placeMinesAtPositions(board, positions = []) {
    for (const [row, col] of positions) {
        if (isValidPosition(board, row, col)) {
            board[row][col].hasMine = true;
        }
    }
}

// --- –û–±—á–∏—Å–ª–∏—Ç–∏ neighborCount –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ ---
function computeNeighborCounts(board) {
    const totalRows = board.length;
    const totalCols = board[0].length;

    for (let row = 0; row < totalRows; row++) {
        for (let col = 0; col < totalCols; col++) {
            const cell = board[row][col];

            if (cell.hasMine) {
                cell.neighborCount = null; // –∞–±–æ -1, –∞–ª–µ null —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—à–µ
                continue;
            }

            let mineCount = 0;
            for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {
                for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {
                    if (deltaRow === 0 && deltaCol === 0) continue;
                    const neighborRow = row + deltaRow;
                    const neighborCol = col + deltaCol;
                    if (isValidPosition(board, neighborRow, neighborCol) && board[neighborRow][neighborCol].hasMine) {
                        count++;
                    }
                }
            }
            cell.neighborCount = count;
        }
    }
}

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è ---
                        mineCount++;
                    }
                }
            }
            cell.neighborCount = mineCount;
        }
    }
}

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏–∫–ª–∞–¥—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ ---
function initTestGame(rows = 10, cols = 10, mines = []) {
    const game = new GameState(rows, cols, mines.length);
    placeMinesAtPositions(game.board, mines);
    computeNeighborCounts(game.board);
    return game;
}

// --- –í–∏–≤—ñ–¥ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å ---
function printBoardToConsole(board) {
    const rows = board.length;
    const cols = board[0].length;
    let out = '\n';
    for (let row = 0; row < rows; row++) {
        let line = '';
        for (let col = 0; col < cols; col++) {
            const cell = board[row][col];
            if (cell.hasMine) line += 'üí£';
            else line += ' ' + cell.neighborCount + ' ';
        }
        out += line + '\n';
    }
    console.log(out);
}

// --- –ü—Ä–∏–∫–ª–∞–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è ---
const exampleMines = [
    [0, 3], [0, 6], [1, 8], [2, 2], [3, 0], [4, 5], [6, 9], [7, 7], [8, 1], [9, 4]
];
const testGame = initTestGame(10, 10, exampleMines);
console.log('Test game initialized. Game state:');
console.log({ rows: testGame.rows, cols: testGame.cols, mineCount: testGame.mineCount, status: testGame.status });
printBoardToConsole(testGame.board);

// --- –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—ñ–∫–∏ –≥—Ä–∏ ---

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
function generateField(rows = 10, cols = 10, mineCount = 10) {
    const game = new GameState(rows, cols, mineCount);
    let minesPlaced = 0;

    while (minesPlaced < mineCount) {
        const randomRow = Math.floor(Math.random() * rows);
        const randomCol = Math.floor(Math.random() * cols);

        if (!game.board[randomRow][randomCol].hasMine) {
            game.board[randomRow][randomCol].hasMine = true;
            minesPlaced++;
        }
    }
    computeNeighborCounts(game.board);
    return game.board;
}

// –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏
function countNeighbourMines(board, row, col) {
    if (!isValidPosition(board, row, col)) return 0;
    return board[row][col].neighborCount;
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
function openCell(game, row, col) {
    if (!isValidPosition(game.board, row, col)) return;
    const cell = game.board[row][col];

    if (cell.state !== CELL_STATE.CLOSED) return;

    if (cell.hasMine) {
        cell.state = CELL_STATE.OPEN;
        game.status = 'lost';
        return;
    }

    function reveal(currentRow, currentCol) {
        if (!isValidPosition(game.board, currentRow, currentCol)) return;
        const currentCell = game.board[currentRow][currentCol];

        if (currentCell.state === CELL_STATE.OPEN || currentCell.state === CELL_STATE.FLAGGED) return;

        currentCell.state = CELL_STATE.OPEN;

        if (currentCell.neighborCount === 0) {
            for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {
                for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {
                    if (deltaRow === 0 && deltaCol === 0) continue;
                    reveal(currentRow + deltaRow, currentCol + deltaCol);
                }
            }
        }
    }

    reveal(row, col);
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è / –∑–Ω—è—Ç—Ç—è –ø—Ä–∞–ø–æ—Ä—Ü—è
function toggleFlag(game, row, col) {
    if (!isValidPosition(game.board, row, col)) return;
    const cell = game.board[row][col];

    if (cell.state === CELL_STATE.CLOSED) {
        cell.state = CELL_STATE.FLAGGED;
    } else if (cell.state === CELL_STATE.FLAGGED) {
        cell.state = CELL_STATE.CLOSED;
    }
}

// –¢–∞–π–º–µ—Ä
let timerId = null;
let timeElapsed = 0;

function startTimer() {
    if (timerId) return;
    timerId = setInterval(() => {
        timeElapsed++;
        console.log('Time:', timeElapsed);
    }, 1000);
}

function stopTimer() {
    clearInterval(timerId);
    timerId = null;
}

// --- –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ window –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
// --- –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) ---
function printBoardToConsole(board) {
    const totalRows = board.length;
    const totalCols = board[0].length;
    let output = '\n';

    for (let row = 0; row < totalRows; row++) {
        let line = '';
        for (let col = 0; col < totalCols; col++) {
            const cell = board[row][col];
            if (cell.hasMine) {
                line += ' M ';
            } else {
                line += ' ' + cell.neighborCount + ' ';
            }
        }
        output += line + '\n';
    }

    console.log(output);
}

// --- –ü—Ä–∏–∫–ª–∞–¥: —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–ª–µ 10x10 –∑ –∫—ñ–ª—å–∫–æ–º–∞ –º–∏–Ω–∞–º–∏ ---
const exampleMines = [
    [0, 3], [0, 6], [1, 8], [2, 2], [3, 0], [4, 5], [6, 9], [7, 7], [8, 1], [9, 4]
];

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –≥—Ä—É —ñ –≤–∏–≤–µ–¥–µ–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
const testGame = initTestGame(10, 10, exampleMines);
console.log('Test game initialized. Game state:');
console.log({
    rows: testGame.rows,
    cols: testGame.cols,
    mineCount: testGame.mineCount,
    status: testGame.status
});
printBoardToConsole(testGame.board);

// –ó—Ä—É—á–Ω–æ ‚Äî –ø—Ä–∏–≤'—è–∂–µ–º–æ –¥–æ window –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
window.minesweeperGame = {
    CELL_STATE,
    createCell,
    createEmptyBoard,
    placeMinesAtPositions,
    computeNeighborCounts,
    initTestGame,
    printBoardToConsole,
    testGame,
    generateField,
    countNeighbourMines,
    openCell,
    toggleFlag,
    startTimer,
    stopTimer,
    timeElapsed
};


// --- –Ø–∫ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

// 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
// const randomBoard = minesweeperGame.generateField(10, 10, 15);
// console.log(randomBoard);
// –ö–æ–∂–µ–Ω –∑–∞–ø—É—Å–∫ –º–∞—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–æ–ª–µ 10x10 –∑ 15 –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –º—ñ–Ω–∞–º–∏

// 2. –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏
// console.log(minesweeperGame.countNeighbourMines(testGame.board, 0, 0));
// console.log(minesweeperGame.countNeighbourMines(testGame.board, 1, 8));
// –ü–æ–≤–∏–Ω–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É—Å—ñ–¥–Ω—ñ—Ö –º—ñ–Ω

// 3. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
// minesweeperGame.openCell(testGame, 2, 3);
// console.log(testGame.board[2][3].state);
// –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –±–µ–∑ –º—ñ–Ω–∏ ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è, —è–∫—â–æ 0 ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —Å—É—Å—ñ–¥–Ω—ñ
// –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑ –º—ñ–Ω–æ—é ‚Äî testGame.status = 'lost'

// 4. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è / –∑–Ω—è—Ç—Ç—è –ø—Ä–∞–ø–æ—Ä—Ü—è
// minesweeperGame.toggleFlag(testGame, 0, 0);
// console.log(testGame.board[0][0].state);
// –ü–æ–≤–∏–Ω–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å—Ç–∞–Ω –º—ñ–∂ 'closed' —ñ 'flagged'

// 5. –¢–∞–π–º–µ—Ä
// minesweeperGame.startTimer();
// setTimeout(() => { minesweeperGame.stopTimer(); console.log('–ß–∞—Å –≥—Ä–∏:', minesweeperGame.timeElapsed); }, 5000);
// –ü–æ—á–∏–Ω–∞—î –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É —ñ –∑—É–ø–∏–Ω—è—î —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –≤–∏–≤–æ–¥–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∏–π —á–∞—Å
    testGame
};
